#include <iostream>
#include <fstream>
#include <filesystem>
#include <thread>
#include <chrono>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <csignal>
#include <sys/stat.h>
#include <unistd.h>
#include <sys/types.h>
#include <pwd.h>
#include <grp.h>
#include <fcntl.h>
#include <dirent.h>
#include <sys/mman.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <openssl/sha.h>

namespace fs = std::filesystem;
üóÇÔ∏è Gerenciamento de Arquivos
cpp
Copiar c√≥digo
std::rename("antigo.txt", "novo.txt");                          // Renomear arquivo
std::remove("arquivo.txt");                                      // Apagar arquivo
fs::exists("caminho");                                           // Verificar se existe
fs::file_size("arquivo.txt");                                    // Tamanho do arquivo (bytes)
fs::permissions("arquivo.txt", fs::perms::owner_all);            // Alterar permiss√µes
fs::last_write_time("arquivo.txt");                              // √öltima modifica√ß√£o
fs::copy("origem", "destino", fs::copy_options::recursive);      // Copiar pasta

open("arquivo.bin", O_CREAT | O_WRONLY, 0644);                   // Abrir arquivo POSIX
chmod("arquivo.txt", 0600);                                      // Mudar permiss√µes (Unix)
chown("arquivo.txt", 1000, 1000);                                // Mudar dono e grupo
stat("arquivo.txt", &st);                                        // Obter metadados
utime("arquivo.txt", nullptr);                                   // Atualizar timestamps
‚öôÔ∏è Processos e Threads
cpp
Copiar c√≥digo
std::this_thread::sleep_for(std::chrono::seconds(2));            // Pausar thread
std::thread t(funcao);                                           // Criar thread
t.join();                                                        // Esperar thread

pthread_create(&tid, nullptr, minhaFuncao, nullptr);             // Criar thread POSIX
pthread_cancel(tid);                                             // Cancelar thread
pthread_kill(tid, SIGTERM);                                      // Enviar sinal a thread
pthread_detach(tid);                                             // Desvincular thread

pid_t pid = fork();                                              // Criar processo
execl("/bin/ls", "ls", "-l", NULL);                              // Executar programa
kill(pid, SIGKILL);                                              // Matar processo
getpid();                                                        // ID do processo atual
getppid();                                                       // ID do processo pai
getuid();                                                        // ID do usu√°rio
setuid(0);                                                       // Tornar-se root
üåê Rede e Sockets
cpp
Copiar c√≥digo
socket(AF_INET, SOCK_STREAM, 0);                                 // Criar socket TCP
bind(sockfd, (sockaddr*)&addr, sizeof(addr));                    // Associar endere√ßo
listen(sockfd, 5);                                               // Modo servidor
accept(sockfd, nullptr, nullptr);                                // Aceitar conex√£o
connect(sockfd, (sockaddr*)&addr, sizeof(addr));                 // Conectar ao servidor
send(sockfd, buffer, len, 0);                                    // Enviar dados
recv(sockfd, buffer, len, 0);                                    // Receber dados
shutdown(sockfd, SHUT_RDWR);                                     // Encerrar conex√£o
close(sockfd);                                                   // Fechar socket

inet_addr("127.0.0.1");                                          // IP ‚Üí bin√°rio
inet_ntoa(in_addr);                                              // Bin√°rio ‚Üí string
gethostname(host, sizeof(host));                                 // Nome do host
gethostbyname("www.site.com");                                   // Resolver DNS
üíæ Mem√≥ria e Mapeamento
cpp
Copiar c√≥digo
malloc(1024);                                                    // Alocar mem√≥ria heap
calloc(1, 1024);                                                 // Alocar zerada
realloc(ptr, 2048);                                              // Redimensionar mem√≥ria
free(ptr);                                                       // Liberar mem√≥ria

memset(buffer, 0, 1024);                                         // Zerar mem√≥ria
memcpy(dest, src, 1024);                                         // Copiar mem√≥ria
memcmp(buf1, buf2, 1024);                                        // Comparar mem√≥ria

mmap(nullptr, 4096, PROT_READ | PROT_WRITE, MAP_SHARED, fd, 0);  // Mapear arquivo
munmap(ptr, 4096);                                               // Desmapear
mlock(ptr, 4096);                                                // Travar na RAM
munlock(ptr, 4096);                                              // Destravar
üîê Seguran√ßa e Criptografia
cpp
Copiar c√≥digo
SHA256_CTX ctx;                                                  // Contexto SHA256
SHA256_Init(&ctx);                                               // Iniciar hash
SHA256_Update(&ctx, dados, tamanho);                             // Atualizar hash
SHA256_Final(resultado, &ctx);                                   // Finalizar hash

umask(0077);                                                     // M√°scara de cria√ß√£o
setgid(0);                                                       // Mudar grupo
seteuid(0);                                                      // Mudar usu√°rio efetivo
getgrnam("root");                                                // Grupo pelo nome
getpwnam("usuario");                                             // Usu√°rio pelo nome
crypt("senha", "sal");                                           // Hash de senha
getpass("Senha: ");                                              // Ler senha oculta
üö® Sinais e Monitoramento
cpp
Copiar c√≥digo
signal(SIGINT, handler);                                         // Tratar Ctrl+C
signal(SIGTERM, handler);                                        // Tratar encerramento
sigaction(SIGSEGV, &act, nullptr);                               // Tratar segfault
alarm(5);                                                        // Alarme de 5s
pause();                                                         // Esperar sinal
sleep(10);                                                       // Pausar processo
gettimeofday(&tv, nullptr);                                      // Tempo atual
clock_gettime(CLOCK_REALTIME, &ts);                              // Tempo em nanossegundos
üìÅ Diret√≥rios
cpp
Copiar c√≥digo
mkdir("nova_pasta", 0755);                                       // Criar pasta
rmdir("pasta");                                                  // Remover pasta
opendir("pasta");                                                // Abrir pasta
readdir(dp);                                                     // Ler entradas
closedir(dp);                                                    // Fechar pasta
üí¨ Fluxo de Entrada/Sa√≠da
cpp
Copiar c√≥digo
std::cin.getline(buffer, 256);                                   // Ler linha
std::cout << "texto\n";                                          // Escrever
scanf("%d", &num);                                               // Ler inteiro
printf("valor: %d\n", num);                                      // Mostrar valor
fflush(stdout);                                                  // For√ßar sa√≠da
üß© Controle de Threads (pthread)
cpp
Copiar c√≥digo
pthread_create();             // Cria nova thread
pthread_exit();               // Encerra thread atual
pthread_join();               // Espera thread terminar
pthread_detach();             // Libera recursos automaticamente
pthread_self();               // Retorna ID da thread atual
pthread_equal();              // Compara IDs
pthread_cancel();             // Solicita cancelamento
pthread_setcancelstate();     // Define se cancelamento √© habilitado
pthread_setcanceltype();      // Define tipo de cancelamento
pthread_testcancel();         // Testa cancelamento pendente
üîí Mutexes
cpp
Copiar c√≥digo
pthread_mutex_init();         // Inicializa mutex
pthread_mutex_destroy();      // Destroi mutex
pthread_mutex_lock();         // Bloqueia mutex
pthread_mutex_trylock();      // Tenta bloquear
pthread_mutex_unlock();       // Desbloqueia mutex
üîÅ Vari√°veis de Condi√ß√£o
cpp
Copiar c√≥digo
pthread_cond_init();          // Inicializa vari√°vel
pthread_cond_destroy();       // Destroi vari√°vel
pthread_cond_wait();          // Espera sinal
pthread_cond_timedwait();     // Espera at√© limite
pthread_cond_signal();        // Acorda uma thread
pthread_cond_broadcast();     // Acorda todas
üö¶ Sem√°foros
cpp
Copiar c√≥digo
sem_init();                   // Inicializa sem√°foro
sem_destroy();                // Destroi sem√°foro
sem_wait();                   // Decrementa sem√°foro (bloqueia)
sem_trywait();                // Tenta sem bloquear
sem_post();                   // Incrementa (libera recurso)
sem_getvalue();               // L√™ valor atual
‚è±Ô∏è Controle de Tempo
cpp
Copiar c√≥digo
time();                       // Tempo atual (segundos desde Epoch)
gettimeofday();               // Tempo em microssegundos
clock_gettime();              // Tempo de rel√≥gios espec√≠ficos
clock_settime();              // Define tempo
sleep();                      // Pausa (segundos)
usleep();                     // Pausa (microssegundos)
nanosleep();                  // Pausa (nanosegundos)
alarm();                      // Alarme de segundos
setitimer();                  // Temporizador peri√≥dico
getitimer();                  // Obt√©m temporizador
üë§ Usu√°rios e Permiss√µes
cpp
Copiar c√≥digo
getuid();                     // ID do usu√°rio
geteuid();                    // ID efetivo
getgid();                     // ID do grupo
getegid();                    // ID efetivo do grupo
setuid();                     // Define usu√°rio
seteuid();                    // Define usu√°rio efetivo
setgid();                     // Define grupo
setegid();                    // Define grupo efetivo
chmod();                      // Altera permiss√µes
fchmod();                     // Altera via descritor
chown();                      // Altera dono
fchown();                     // Altera dono via descritor
umask();                      // Define m√°scara padr√£o
üñ•Ô∏è Entrada/Sa√≠da de Terminal
cpp
Copiar c√≥digo
isatty();                     // Verifica se √© terminal
ttyname();                    // Nome do terminal
tcgetattr();                  // Atributos do terminal
tcsetattr();                  // Define atributos
cfmakeraw();                  // Modo bruto
cfsetispeed();                // Velocidade de entrada
cfsetospeed();                // Velocidade de sa√≠da
tcflush();                    // Limpa buffers
tcsendbreak();                // Envia break
tcdrain();                    // Espera sa√≠da
üß† Mapeamento e Pagina√ß√£o
cpp
Copiar c√≥digo
mlockall();                   // Bloquear todas as p√°ginas
munlockall();                 // Desbloquear todas
madvise();                    // Dicas de uso ao kernel
mincore();                    // Verifica p√°ginas em RAM
getpagesize();                // Tamanho da p√°gina
posix_fadvise();              // Dicas de uso de arquivo
posix_fallocate();            // Reserva espa√ßo no disco
üîë Criptografia e Seguran√ßa (baixo n√≠vel)
cpp
Copiar c√≥digo
getrandom();                  // Bytes aleat√≥rios seguros
arc4random();                 // Aleat√≥rios criptogr√°ficos
RAND_bytes();                 // (OpenSSL) Bytes seguros
SHA256_Init();                // Inicia contexto SHA256
SHA256_Update();              // Atualiza hash
SHA256_Final();               // Finaliza hash
HMAC();                       // Hash HMAC
EVP_EncryptInit();            // Inicia criptografia sim√©trica
EVP_EncryptUpdate();          // Criptografa blocos
EVP_EncryptFinal();           // Finaliza criptografia
EVP_DecryptInit();            // Inicia descriptografia
EVP_DecryptUpdate();          // Descriptografa blocos
EVP_DecryptFinal();           // Finaliza descriptografia
